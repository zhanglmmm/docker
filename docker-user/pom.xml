<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
   <groupId>zlm.study</groupId>
   <artifactId>parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
      
  <groupId>com.sc</groupId>
  <artifactId>docker-user</artifactId>
  <version>0.0.2-SNAPSHOT</version>
  <name>docker-user</name>
  <url>http://maven.apache.org</url>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <docker.image.prefix>springboot</docker.image.prefix>
  </properties>
  <dependencies>
     	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.springframework.cloud</groupId>
		    <artifactId>spring-cloud-starter-eureka</artifactId>
		    <version>1.4.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-ribbon</artifactId>
			<version>1.4.3.RELEASE</version>
		</dependency>
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		</dependency>
  </dependencies>
  <build>
  	<finalName>docker-user-1.0</finalName>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
        <!-- Docker maven plugin -->
        <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>1.0.0</version>
            <!-- 
           		 在很多场景下，我们有这样的需求，例如执行mvn clean package 时，自动地为我们构建docker镜像，可以吗？答案是肯定的。我们只需要将插件的goal 绑定在某个phase即可。
				所谓的phase和goal，可以这样理解：maven命令格式是：mvn phase:goal ，例如mvn package docker:build 那么，package 和docker 都是phase，build 则是goal 。
				下面是示例：
			 -->
            <executions>
		          <execution>
		            <id>build-image</id>
		            <phase>package</phase>
		            <goals>
		              <goal>build</goal>
		            </goals>
		          </execution>
        	</executions>
            	
            <configuration>
                <imageName>${docker.reposity}/${docker.namespace}/${project.artifactId}:${docker.version}</imageName>
                <dockerDirectory>${basedir}/src/main/docker</dockerDirectory>
              <!-- 解决Connect to localhost:2375的问题的其中一种方式，注意要跟docker-machine env相一致 
		       <dockerHost>https://192.168.99.100:2376</dockerHost> 
		       <dockerCertPath>C:\Users\Administrator\.docker\machine\machines\default</dockerCertPath>
		       -->
		       <!-- set DOCKER_HOST=tcp://192.168.2.128:2375  
		       <dockerHost>tcp://192.168.2.128:2375</dockerHost>
		    -->
		    <pushImage>false</pushImage>
	                <forceTags>true</forceTags>
	              <imageTags>
				    <imageTag>${docker.version}</imageTag>
				  </imageTags>
                <resources>
                    <resource>
                        <targetPath>/</targetPath>
                        <directory>${project.build.directory}</directory>
                        <include>${project.build.finalName}.jar</include>
                    </resource>
                </resources>
                
                   <!-- 以下两行是为了docker push到DockerHub使用的。 
		        <serverId>docker-hub</serverId>
		        <registryUrl>https://index.docker.io/v1/</registryUrl>
		        
		        <serverId>docker-aljx</serverId>
		        -->
            </configuration>
        </plugin>
        <!-- Docker maven plugin -->
    </plugins>
</build>
</project>
